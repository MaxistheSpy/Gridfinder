import slicerio
import nrrd
import tempfile
import os
from collections import OrderedDict
import colorsys
import glob
import numpy as np
# https://slicer.readthedocs.io/en/latest/developer_guide/modules/segmentations.html

# data, headers = nrrd.read("/home/max/Downloads/Segmentation.seg.nrrd")


# special_headers = ['type', 'dimension', 'space', 'sizes', 'space directions', 'kinds', 'encoding', 'space origin']
# slicer_headers = {'ion_ReferenceImageExtentOffset', 'ion_MasterRepresentation', 'ion_ConversionParameters',
#                   'ion_ContainedRepresentationNames'}
# segment_values = {'LabelValue', 'Extent', 'Name', 'Tags', 'ColorAutoGenerated', 'Color', 'NameAutoGenerated', 'Layer', 'ID'}

def write_numpy_to_segment_file(data, num_segments: int):
    tmp_segmentation_file_path = os.path.join(tempfile.gettempdir(), "otolith-segments-tmpfile.nrrd")
    old_tmpfiles = glob.glob(os.path.join(tempfile.gettempdir(), "otolith-segments-tmpfile*"))
    for filePath in old_tmpfiles:
        try:
            os.remove(filePath)
        except OSError:
            print("could not delete old tmpfile")
    tmp_segmentation_file = tempfile.NamedTemporaryFile(dir=tempfile.gettempdir(), prefix="otolith-segments-tmpfile",
                                                        suffix=".nrrd", delete=False)
    print(tmp_segmentation_file.name)

    headers = OrderedDict()
    # headers["type"] = data.dtype.name
    # headers["dimension"] = "3"
    # headers["space"] = "left-posterior-superior"
    # headers["sizes"] = f"{data.shape[0]} {data.shape[1]} {data.shape[2]}"
    # headers["space directions"] = '(-1,0,0) (0,-1,0) (0,0,1)'
    # headers["kinds"] = "domain domain domain"
    # headers["encoding"] = "raw"

    # options = OrderedDict()
    colors = [colorsys.hsv_to_rgb(x / num_segments, 1, 1) for x in range(num_segments)]
    for index in range(num_segments):
        external_index = index + 1
        headers[f"Segment{index}_Color"] = f"{colors[index][0]} {colors[index][1]} {colors[index][2]}"
        headers[f"Segment{index}_ColorAutoGenerated"] = "1"
        headers[f"Segment{index}_ID"] = f"{external_index}"
        headers[f"Segment{index}_LabelValue"] = f"{external_index}"
        headers[f"Segment{index}_Layer"] = "0"
        headers[f"Segment{index}_Name"] = f"Segment_{external_index}"
    data = np.swapaxes(data, 0, 2)
    # data = np.rot90(data, 1, axes=(0, 1))
    nrrd.write(tmp_segmentation_file.name, data,header=headers, compression_level=0)
